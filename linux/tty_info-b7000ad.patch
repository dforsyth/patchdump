diff --git a/arch/x86/include/uapi/asm/signal.h b/arch/x86/include/uapi/asm/signal.h
index 8264f47..58b2325 100644
--- a/arch/x86/include/uapi/asm/signal.h
+++ b/arch/x86/include/uapi/asm/signal.h
@@ -56,9 +56,10 @@ typedef unsigned long sigset_t;
 #define SIGPWR		30
 #define SIGSYS		31
 #define	SIGUNUSED	31
+#define SIGINFO         32
 
 /* These should not be considered constants from userland.  */
-#define SIGRTMIN	32
+#define SIGRTMIN	33
 #define SIGRTMAX	_NSIG
 
 /*
diff --git a/drivers/tty/n_tty.c b/drivers/tty/n_tty.c
index 34aacaa..695f806 100644
--- a/drivers/tty/n_tty.c
+++ b/drivers/tty/n_tty.c
@@ -51,6 +51,7 @@
 #include <linux/module.h>
 #include <linux/ratelimit.h>
 #include <linux/vmalloc.h>
+#include <linux/proc_fs.h>
 
 
 /* number of characters left in xmit buffer before select has we have room */
@@ -1232,10 +1233,10 @@ n_tty_receive_signal_char(struct tty_struct *tty, int signal, unsigned char c)
 		n_tty_flush_buffer(tty);
 		tty_driver_flush_buffer(tty);
 		down_read(&tty->termios_rwsem);
-	}
+        }
 	if (I_IXON(tty))
 		start_tty(tty);
-	if (L_ECHO(tty)) {
+	if (L_ECHO(tty) && signal != SIGINFO) {
 		echo_char(c, tty);
 		commit_echoes(tty);
 	}
@@ -1243,6 +1244,51 @@ n_tty_receive_signal_char(struct tty_struct *tty, int signal, unsigned char c)
 	return;
 }
 
+#define LOAD_INT(x) ((x) >> FSHIFT)
+#define LOAD_FRAC(x) LOAD_INT(((x) & (FIXED_1-1)) * 100)
+
+static void
+tty_info(struct tty_struct *tty)
+{
+        int len;
+        struct pid *pid;
+        struct task_struct *task;
+        const char *state;
+        char cmd[TASK_COMM_LEN];
+        unsigned long loads[3];
+        char buf[512];
+        int rss;
+
+        if (tty->session == NULL)
+                return;
+
+        pid = tty_get_pgrp(tty);
+        if (pid == NULL)
+                return;
+        task = get_pid_task(pid, PIDTYPE_PID);
+
+        state = get_task_state(task);
+        get_task_comm(cmd, task);
+        get_avenrun(loads, FIXED_1/200, 0);
+
+        rss = task->rss_stat.count[MM_FILEPAGES] +
+                task->rss_stat.count[MM_ANONPAGES];
+        rss = (rss * PAGE_SIZE) / 1024;
+
+        len = snprintf(buf, 512,
+                "load: %lu.%lu cmd: %s %d [%s] %u.%02uu %u.%02us %dk\n\r", 
+                LOAD_INT(loads[0]), LOAD_FRAC(loads[0]), cmd, task->pid, state,
+                (unsigned int)cputime_to_secs(task->utime),
+                cputime_to_usecs(task->utime) / 10000,
+                (unsigned int)cputime_to_secs(task->stime),
+                cputime_to_usecs(task->stime) / 10000,
+                rss);
+        BUG_ON(len < 0);
+
+        tty_write_message(tty, buf);
+        put_pid(pid);
+}
+
 /**
  *	n_tty_receive_char	-	perform processing
  *	@tty: terminal device
@@ -1288,7 +1334,11 @@ n_tty_receive_char_special(struct tty_struct *tty, unsigned char c)
 		} else if (c == SUSP_CHAR(tty)) {
 			n_tty_receive_signal_char(tty, SIGTSTP, c);
 			return 0;
-		}
+		} else if (c == STATUS_CHAR(tty)) {
+                        tty_info(tty);
+                        n_tty_receive_signal_char(tty, SIGINFO, c);
+                        return 0;
+                }
 	}
 
 	if (tty->stopped && !tty->flow_stopped && I_IXON(tty) && I_IXANY(tty)) {
@@ -1803,6 +1853,7 @@ static void n_tty_set_termios(struct tty_struct *tty, struct ktermios *old)
 			set_bit(INTR_CHAR(tty), ldata->char_map);
 			set_bit(QUIT_CHAR(tty), ldata->char_map);
 			set_bit(SUSP_CHAR(tty), ldata->char_map);
+			set_bit(STATUS_CHAR(tty), ldata->char_map);
 		}
 		clear_bit(__DISABLED_CHAR, ldata->char_map);
 		ldata->raw = 0;
diff --git a/fs/proc/array.c b/fs/proc/array.c
index 1bd2077..cae746c 100644
--- a/fs/proc/array.c
+++ b/fs/proc/array.c
@@ -146,7 +146,7 @@ static const char * const task_state_array[] = {
 	"P (parked)",		/* 512 */
 };
 
-static inline const char *get_task_state(struct task_struct *tsk)
+const char *get_task_state(struct task_struct *tsk)
 {
 	unsigned int state = (tsk->state & TASK_REPORT) | tsk->exit_state;
 	const char * const *p = &task_state_array[0];
diff --git a/include/asm-generic/termios.h b/include/asm-generic/termios.h
index 4fa6fe0..09b2fc7 100644
--- a/include/asm-generic/termios.h
+++ b/include/asm-generic/termios.h
@@ -9,9 +9,9 @@
 	eof=^D		vtime=\0	vmin=\1		sxtc=\0
 	start=^Q	stop=^S		susp=^Z		eol=\0
 	reprint=^R	discard=^U	werase=^W	lnext=^V
-	eol2=\0
+	eol2=\0 status=^T
 */
-#define INIT_C_CC "\003\034\177\025\004\0\1\0\021\023\032\0\022\017\027\026\0"
+#define INIT_C_CC "\003\034\177\025\004\0\1\0\021\023\032\0\022\017\027\026\0\024"
 
 /*
  * Translate a "termio" structure into a "termios". Ugh.
diff --git a/include/linux/proc_fs.h b/include/linux/proc_fs.h
index 608e60a..73ac328 100644
--- a/include/linux/proc_fs.h
+++ b/include/linux/proc_fs.h
@@ -42,6 +42,8 @@ extern void proc_remove(struct proc_dir_entry *);
 extern void remove_proc_entry(const char *, struct proc_dir_entry *);
 extern int remove_proc_subtree(const char *, struct proc_dir_entry *);
 
+extern const char *get_task_state(struct task_struct *);
+
 #else /* CONFIG_PROC_FS */
 
 static inline void proc_flush_task(struct task_struct *task)
diff --git a/include/linux/signal.h b/include/linux/signal.h
index 2ac423b..30adf10 100644
--- a/include/linux/signal.h
+++ b/include/linux/signal.h
@@ -410,7 +410,8 @@ int unhandled_signal(struct task_struct *tsk, int sig);
 
 #define SIG_KERNEL_IGNORE_MASK (\
         rt_sigmask(SIGCONT)   |  rt_sigmask(SIGCHLD)   | \
-	rt_sigmask(SIGWINCH)  |  rt_sigmask(SIGURG)    )
+	rt_sigmask(SIGWINCH)  |  rt_sigmask(SIGURG)    | \
+        rt_sigmask(SIGINFO)                            )
 
 #define sig_kernel_only(sig) \
 	(((sig) < SIGRTMIN) && siginmask(sig, SIG_KERNEL_ONLY_MASK))
diff --git a/include/linux/tty.h b/include/linux/tty.h
index 97d660e..58bf3c9 100644
--- a/include/linux/tty.h
+++ b/include/linux/tty.h
@@ -90,6 +90,7 @@ struct tty_bufhead {
 #define WERASE_CHAR(tty) ((tty)->termios.c_cc[VWERASE])
 #define LNEXT_CHAR(tty)	((tty)->termios.c_cc[VLNEXT])
 #define EOL2_CHAR(tty) ((tty)->termios.c_cc[VEOL2])
+#define STATUS_CHAR(tty) ((tty)->termios.c_cc[VSTATUS])
 
 #define _I_FLAG(tty, f)	((tty)->termios.c_iflag & (f))
 #define _O_FLAG(tty, f)	((tty)->termios.c_oflag & (f))
diff --git a/include/uapi/asm-generic/termbits.h b/include/uapi/asm-generic/termbits.h
index 232b478..0f51b2b 100644
--- a/include/uapi/asm-generic/termbits.h
+++ b/include/uapi/asm-generic/termbits.h
@@ -57,6 +57,7 @@ struct ktermios {
 #define VWERASE 14
 #define VLNEXT 15
 #define VEOL2 16
+#define VSTATUS 17
 
 /* c_iflag bits */
 #define IGNBRK	0000001
